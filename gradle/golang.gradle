task installProtocGenGo(type: Exec) {
  onlyIf {
    pathOfExecutable("protoc-gen-go") == ""
  }
  commandLine "go", "get", "github.com/golang/protobuf/protoc-gen-go@v${dist.version.proto.go}"
}

task generateProtoGo {
  dependsOn "installProtocGenGo"
  finalizedBy "finalizeProtoGo"
  ext {
    source = "${protoGenMainDir}/go"
  }
  inputs.file "mod.go"
  inputs.file "lib.go"
  inputs.dir "proto"
  outputs.dir source
  doLast {
    mkdir source
    fileTree("proto"){ include "**/*.proto" }.visit { fd ->
      if (fd.file.directory) return
      println("generate go: ${fd.path}")
      exec {
        commandLine "protoc", "-Iproto", "--go_out=plugins=grpc:${source}", fd.path
      }
    }
    copy {
      from "lib.go"
      into source
    }
    exec {
      environment buildEnviron(dist)
      standardInput file("mod.go").newInputStream()
      standardOutput file("${source}/go.mod").newOutputStream()
      commandLine "envsubst"
    }
    fileTree(source){ include "*", "github.com/*" }.visit { fd ->
      if (fd.file.file) return
      if (fd.path == "github.com") return
      copy {
        from "${source}/go.mod"
        into "${source}/${fd.path}"
        filter { line ->
          line.startsWith("module") ? "module ${fd.path}" : line
        }
      }
    }
  }
}

static def commonsOfPath(global, String... dirs) {
  def commons = null
  dirs.each { dir ->
    def path = [].toSet()
    global.fileTree(dir){ include "**" }.visit { fd ->
      if (fd.file.file) return
      path.add(fd.path)
    }
    if (commons == null) {
      commons = path
    } else {
      commons.retainAll(path)
    }
  }
  if (commons == null) commons = [].toSet()
  return commons
}

task finalizeProtoGo {
  dependsOn "generateProtoGo"
  ext {
    source = generateProtoGo.source
    rot = "github.com"
    sat = "${rot}/tensorflow/tensorflow/tensorflow/go"
    ome = "tensorflow"
    output = "${buildDir}/go"
  }
  onlyIf {
    file("${source}/${rot}").exists()
  }
  doLast {
    fileTree(source){ include "**/*.go" }.visit { fd ->
      if (fd.file.directory) return
      exec {
        commandLine "sed", "-i.sed", "s@[[:<:]]${sat}[[:>:]]@${ome}@g", "${source}/${fd.path}"
      }
    }
    fileTree(source){ include "${sat}/**/*.go" }.visit { fd ->
      if (fd.file.directory) return
      exec {
        commandLine "sed", "-i.sed", "s@^package .*@package ${ome}@g", "${source}/${fd.path}"
      }
    }
    commonsOfPath(project, "${source}/${sat}", "${source}/${ome}").each { dir ->
      def pattern = "\"${ome}/${dir}\""
      fileTree(source){ include "${sat}/${dir}/*.go", "${ome}/${dir}/*.go" }.visit { fd ->
        if (fd.file.directory) return
        def name = new ByteArrayOutputStream()
        exec {
          ignoreExitValue = true
          standardOutput name
          commandLine "grep", "-o", "\\w* ${pattern}", "${source}/${fd.path}"
        }
        name = name.toString().trim().tokenize(" ")
        if (name[0] == null) return
        name = name.size() == 1 ? name[0].tokenize("/")[-1] : name[0]
        println("adjust ${name} in ${fd.path}")
        exec {
          commandLine "sed", "-i.sed", "\\@${pattern}@d", "${source}/${fd.path}"
        }
        exec {
          commandLine "sed", "-i.sed", "s@[[:<:]]${name}\\.@@g", "${source}/${fd.path}"
        }
      }
    }
    copy {
      from "${source}/${sat}"
      include "**/*.go"
      into "${source}/${ome}"
    }
    delete {
      delete "${source}/${rot}"
      delete fileTree(source){ include "**/*.sed" }
    }
    fileTree(source){ include "*" }.visit { fd ->
      if (fd.file.file) return
      file("${source}/go.mod").append("\nreplace ${fd.path} => ./${fd.path}\n")
    }
    exec {
      commandLine "ln", "-nfs", source, output
    }
  }
}

task golang(type: Exec) {
  dependsOn "generateProtoGo"
  inputs.dir generateProtoGo.source
  outputs.dir generateProtoGo.source
  workingDir generateProtoGo.source
  commandLine "go", "build", "-v"
  args(dist.build == "release" ? ["-ldflags", "-s -w"] : [])
  args("./...")
}

task __golang__ {
  dependsOn "golang"
  ext {
    src = "go"
    git = dist.url.replaceFirst('^\\w+://', '').replaceFirst('/$', '')
  }
  inputs.dir generateProtoGo.source
  outputs.dir src
  doLast {
    copy {
      from generateProtoGo.source
      exclude "**/go.mod", "**/go.sum"
      into src
      filter { line ->
         line.replaceFirst('(\\w+\\s+")(tensorflow(_serving)?(/\\w+)*")',
                           '$1' + git + '/v2/' + src + '/$2')
      }
    }
    copy {
      from "${generateProtoGo.source}/go.mod"
      into "."
      filter { line ->
        line.matches('\\s*(replace|tensorflow(_serving)?)\\s+.*') ? null : line
      }
    }
    delete { delete "mod.go", "lib.go" }
  }
}
