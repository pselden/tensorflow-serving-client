buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.11"
  }
}

//---export-begin---//
ext {
  vers = [tfs: file("VERSION").text.trim(),
          jvm: "8",
          grpc: "1.27.0",
          proto: "3.11.0"]
  dist = [build: "release",
          name: [_: project.name,
                 title: project.name.tokenize("-").collect{it.capitalize()}.join(" "),
                 snake: project.name.replaceAll("-", "_")],
          version: [_: vers.tfs,
                    grpc: [_: vers.grpc,
                           dotnet: vers.grpc.tokenize(".").withIndex().collect{ v, i ->
                                     i == 0 ? ((v as int) + 1) : v
                                   }.join("."),
                           node: "1.24.0",
                           rust: "0.4.6"],
                    proto: [_: vers.proto,
                            go: "1.3.2",
                            rust: "2.10.1"]],
          license: "Apache-2.0",
          author: [_: "Figroc Chen <figroc@gmail.com>",
                   id: "figroc",
                   name: "Figroc Chen",
                   email: "figroc@gmail.com"],
          url: "https://github.com/pselden/tensorflow-serving-client",
          description: "A prebuilt tensorflow serving client from the tensorflow serving proto files"]
}

version = "${vers.tfs}"

apply plugin: "java-library"

sourceCompatibility = "1.${vers.jvm}"
targetCompatibility = "1.${vers.jvm}"

repositories {
  mavenCentral()
}
//---export-end---//

static def buildEnviron(options, prefix="TFSCLIENT") {
  return options.collectEntries { k, v ->
    def key = k == "_" ? prefix : "${prefix}_${k.toUpperCase()}".toString()
    return (v instanceof Map) ? buildEnviron(v, key) : [(key): v]
  }
}

static def pathOfExecutable(name) {
  def path = "which ${name}".execute()
  path.waitFor()
  return path.in.text.trim()
}

apply from: "gradle/grpc.gradle"
apply from: "gradle/cmake.gradle"
apply from: "gradle/java.gradle"
apply from: "gradle/wheel.gradle"
apply from: "gradle/node.gradle"
apply from: "gradle/golang.gradle"
apply from: "gradle/mono.gradle"
apply from: "gradle/rust.gradle"

task buildAll {
  dependsOn "cmake"
  dependsOn "build"
  dependsOn "wheel"
  dependsOn "node"
  dependsOn "golang"
  dependsOn "mono"
  dependsOn "rust"
}

apply from: "gradle/ossrh.gradle"

task publishAll {
  dependsOn "publish"
  dependsOn "twine"
  dependsOn "npmjs"
  dependsOn "nuget"
  dependsOn "crate"
}

task __sources__(type: Delete) {
  dependsOn "__cpp__"
  dependsOn "__java__"
  dependsOn "__python__"
  dependsOn "__node__"
  dependsOn "__golang__"
  dependsOn "__csharp__"
  dependsOn "__rust__"
  delete ".travis.yml", "update.sh", "gradle"
}
